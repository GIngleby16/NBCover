/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gingleby.cover.ui;

import java.awt.BorderLayout;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreePath;
import org.netbeans.api.java.project.JavaProjectConstants;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectUtils;
import org.netbeans.api.project.SourceGroup;
import org.netbeans.api.project.Sources;
import org.netbeans.spi.project.SubprojectProvider;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;

/**
 *
 * @author graeme
 */
public class CoverConfigurationPanel extends javax.swing.JPanel {

    private final DefaultMutableTreeNode root = new DefaultMutableTreeNode("root");
    private final DefaultTreeModel treeModel = new DefaultTreeModel(root);
    private final JTree tree = new JTree(treeModel);

    private final HashSet<Project> analyzedProjects = new HashSet<>();
    private final HashSet<String> analyzedLibraries = new HashSet<>();
    
    /**
     * Creates new form CoverConfigurationPanel
     */
    public CoverConfigurationPanel(Project project) {
        initComponents();
        setLayout(new BorderLayout(0, 0));
        add(new JScrollPane(tree), BorderLayout.CENTER);
        tree.setRootVisible(false);
        processProject(project, root);
        setTreeState(tree, new TreePath(root), true);
    }

    private void processProject(Project project, MutableTreeNode node) {
        if(analyzedProjects.contains(project))
            return;
        analyzedProjects.add(project);
                
        FileObject projectdir = project.getProjectDirectory();
        String projectName = projectdir.getName();
        Sources source = ProjectUtils.getSources(project);
        SourceGroup[] groups = source.getSourceGroups(JavaProjectConstants.SOURCES_TYPE_JAVA);
        
        // Add Src directories
        for (SourceGroup group : groups) {            
            DefaultMutableTreeNode pathNode = new DefaultMutableTreeNode(projectName + " - " + FileUtil.getRelativePath(projectdir, group.getRootFolder()));
            node.insert(pathNode, node.getChildCount());
        }
        
        groups = source.getSourceGroups("generic");
        for(SourceGroup group: groups) {
            Enumeration<? extends FileObject> files = group.getRootFolder().getData(true);
            while(files.hasMoreElements()) {
                FileObject file = files.nextElement();
                
                // temp exclude obvious NB platform jars
                if(file.getName().startsWith("org-"))
                    continue;
                
                // temp exclude jars already included
                String filePath = file.getPath();
                if(analyzedLibraries.contains(filePath))
                    continue;
                analyzedLibraries.add(filePath);
                
                if(file.getExt().equals("jar")) {
                    DefaultMutableTreeNode pathNode = new DefaultMutableTreeNode(filePath);
                    node.insert(pathNode, node.getChildCount());
                }
            }
        }
        
        // should I check for generated sources?
        processSubprojects(project, node);
    }
    
    private void processSubprojects(Project project, MutableTreeNode node) {
        SubprojectProvider subs = project.getLookup().lookup(SubprojectProvider.class);
        if (subs != null) {
            Set<? extends Project> subProjects = subs.getSubprojects();
            for (Project p : subProjects) {
                processProject(p, node);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public static void setTreeState(JTree tree, TreePath path, boolean expanded) {
        Object lastNode = path.getLastPathComponent();
        for (int i = 0; i < tree.getModel().getChildCount(lastNode); i++) {
            Object child = tree.getModel().getChild(lastNode, i);
            TreePath pathToChild = path.pathByAddingChild(child);
            setTreeState(tree, pathToChild, expanded);
        }
        if (expanded) {
            tree.expandPath(path);
        } else {
            tree.collapsePath(path);
        }
    }
}
